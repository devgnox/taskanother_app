datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Board {
  id            String   @id @default(uuid())
  orgId         String
  userId        String
  title         String
  imageId       String
  imageThumbUrl String   @db.Text
  imageFullUrl  String   @db.Text
  imageUserName String   @db.Text
  imageLinkHTML String?  @db.Text
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  lists         List[]
}

model List {
  id        String   @id @default(uuid())
  title     String
  order     Int
  userId    String
  boardId   String
  board     Board    @relation(fields: [boardId], references: [id], onDelete: Cascade)
  cards     Card[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([boardId])
}

model Card {
  id            String      @id @default(uuid())
  title         String
  order         Int
  description   String?     @db.Text
  userId        String
  listId        String
  tasks         String?
  links         Link[]
  images        ImageCard[]
  collaborators String[]
  list          List        @relation(fields: [listId], references: [id], onDelete: Cascade)
  dueDate       DateTime?
  completed     Boolean?    @default(false)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  @@index([listId])
}

model Link {
  id     String @id @default(uuid())
  source Source
  url    String
  cardId String
  card   Card   @relation(fields: [cardId], references: [id], onDelete: Cascade)

  @@index([cardId])
}

model ImageCard {
  id     String @id @default(uuid())
  url    String
  title  String
  cardId String
  card   Card   @relation(fields: [cardId], references: [id], onDelete: Cascade)

  @@index([cardId])
}

model AuditLog {
  id          String      @id @default(uuid())
  orgId       String
  action      ACTION
  entityId    String
  entityType  ENTITY_TYPE
  entityTitle String
  userId      String
  userImage   String      @db.Text
  userName    String      @db.Text
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model OrgLimit {
  id        String   @id @default(uuid())
  orgId     String   @unique
  count     Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model OrgSubscription {
  id                     String    @id @default(uuid())
  orgId                  String    @unique
  stripeCustomerId       String?   @unique @map(name: "stripe_customer_id")
  stripeSubscriptionId   String?   @unique @map(name: "stripe_subscription_id")
  stripePriceId          String?   @map(name: "stripe_price_id")
  stripeCurrentPeriodEnd DateTime? @map(name: "stripe_current_period_end")
}

enum ACTION {
  CREATE
  UPDATE
  DELETE
  ASIGNED
  COMPLETED
}

enum ENTITY_TYPE {
  BOARD
  LIST
  CARD
}

enum Source {
  figma
  github
  twitter
  youtube
  other
}
